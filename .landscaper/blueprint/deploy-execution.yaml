deployItems:
  - name: landscaper-service
    type: landscaper.gardener.cloud/helm
    target:
      name: {{ .imports.targetCluster.metadata.name }}
      namespace: {{ .imports.targetCluster.metadata.namespace }}
    config:
      apiVersion: helm.deployer.landscaper.gardener.cloud/v1alpha1
      kind: ProviderConfiguration
      updateStrategy: patch
      name: landscaper-service
      namespace: {{ .imports.namespace }}

      chart:
        {{ $resource := getResource .cd "name" "landscaper-service-chart" }}
        ref: {{ $resource.access.imageReference }}

      values:
        {{ $controllerImgResource := getResource .cd "name" "landscaper-service-controller" }}
        {{ $controllerImgRepo := ociRefRepo $controllerImgResource.access.imageReference }}
        {{ $controllerImgTag := ociRefVersion $controllerImgResource.access.imageReference }}

        {{ $webhooksImgResource := getResource .cd "name" "landscaper-service-webhooks-server" }}
        {{ $webhooksImgRepo := ociRefRepo $webhooksImgResource.access.imageReference }}
        {{ $webhooksImgTag := ociRefVersion $webhooksImgResource.access.imageReference }}

        {{ $landscaperInstanceComponent := getComponent .cd "name" "landscaper-instance" }}
        {{ $landscaperInstanceComponentName := $landscaperInstanceComponent.component.name }}
        {{ $landscaperInstanceComponentVersion := $landscaperInstanceComponent.component.version }}

        {{ $repositoryContext := getRepositoryContext .cd }}
        {{ $repositoryContextType := $repositoryContext.type }}
        {{ $repositoryContextBaseUrl := $repositoryContext.baseUrl }}

        controller:
          containerName: landscaper-service-controller

          image:
            repository: {{ $controllerImgRepo }}
            tag: {{ $controllerImgTag }}
            pullPolicy: IfNotPresent

        webhooksServer:
          containerName: landscaper-service-webhooks

          image:
            repository: {{ $webhooksImgRepo }}
            tag: {{ $webhooksImgTag }}
            pullPolicy: IfNotPresent

        landscaperservice:
          verbosity: {{ .imports.verbosity | default "info" }}

          crdManagement:
            deployCrd: true
            forceUpdate: true

          availabilityMonitoring:
            availabilityCollectionName: availability
            selfLandscaperNamespace: {{ (.imports.availabilityMonitoring).selfLandscaperNamespace | default "landscaper" }}
            periodicCheckInterval: {{ (.imports.availabilityMonitoring).periodicCheckInterval | default "1m" }}
            lsHealthCheckTimeout: {{ (.imports.availabilityMonitoring).lsHealthCheckTimeout | default "5m" }}
{{- if .imports.AVSConfiguration }}
            AVSConfiguration:
              url: {{ .imports.AVSConfiguration.url }}
              apiKey: {{ .imports.AVSConfiguration.apiKey }}
              timeout: {{ .imports.AVSConfiguration.timeout | default "30s" }}
{{- end }}

          gardener:
{{ toYaml .imports.gardenerConfiguration | indent 12 }}

          {{ $shootConfiguration := ( fromJson (toString (readFile "./shoot-config.json"))) }}
          shootConfiguration:
{{ toYaml $shootConfiguration | indent 12 }}

          landscaperServiceComponent:
            name: {{ $landscaperInstanceComponentName }}
            version: {{ $landscaperInstanceComponentVersion }}

            repositoryContext:
              type: {{ $repositoryContextType }}
              baseUrl: {{ $repositoryContextBaseUrl }}

{{- if .imports.registryPullSecrets }}
            registryPullSecrets:
{{ toYaml .imports.registryPullSecrets | indent 14 }}
{{- end }}

        serviceAccount:
          controller:
            create: true
            annotations: {}
            name: ""
          webhooksServer:
            create: true
            annotations: {}
            name: ""
